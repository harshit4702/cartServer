{"version":3,"file":"index.umd.js","sources":["../../src/custom-error.ts","../../src/expected-error.ts","../../src/assertion-error.ts","../../src/normalize.ts","../../src/refute.ts","../../src/assert.ts"],"sourcesContent":["export type CustomErrorConstructor<T extends CustomError = CustomError> = new (message?: string) => T\n\nexport class CustomError extends Error {\n  get name() {\n    return this.constructor.name\n  }\n}\n","import { CustomError } from './custom-error'\n\nexport class ExpectedError extends CustomError {}\n","import { CustomError } from './custom-error'\n\nexport class AssertionError extends CustomError {}\n","export interface SerializableError {\n  name: string\n  message: string\n  stack: string | null\n}\n\nexport function normalize(err: Error): SerializableError {\n  return {\n    name: err.name\n  , message: err.message\n  , stack: err.stack ?? null\n  }\n}\n","import { ExpectedError } from './expected-error'\n\n/**\n * @throws {ExpectedError}\n */\nexport function refute(condition: unknown, message?: string): void {\n  if (condition) throw new ExpectedError(message)\n}\n","import { AssertionError } from './assertion-error'\n\n/**\n * @throws {AssertionError}\n */\nexport function assert(condition: unknown, message?: string): asserts condition {\n  if (!condition) throw new AssertionError(message)\n}\n"],"names":[],"mappings":";;;;;;UAEa,WAAY,SAAQ,KAAK;QACpC,IAAI,IAAI;YACN,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAA;SAC7B;;;UCHU,aAAc,SAAQ,WAAW;;;UCAjC,cAAe,SAAQ,WAAW;;;aCI/B,SAAS,CAAC,GAAU;;QAClC,OAAO;YACL,IAAI,EAAE,GAAG,CAAC,IAAI;YACd,OAAO,EAAE,GAAG,CAAC,OAAO;YACpB,KAAK,QAAE,GAAG,CAAC,KAAK,mCAAI,IAAI;SACzB,CAAA;IACH;;ICVA;;;aAGgB,MAAM,CAAC,SAAkB,EAAE,OAAgB;QACzD,IAAI,SAAS;YAAE,MAAM,IAAI,aAAa,CAAC,OAAO,CAAC,CAAA;IACjD;;ICLA;;;aAGgB,MAAM,CAAC,SAAkB,EAAE,OAAgB;QACzD,IAAI,CAAC,SAAS;YAAE,MAAM,IAAI,cAAc,CAAC,OAAO,CAAC,CAAA;IACnD;;;;;;;;;;;;;;;"}