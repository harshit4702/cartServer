{"version":3,"file":"index.umd.min.js","sources":["../../src/custom-error.ts","../../src/expected-error.ts","../../src/assertion-error.ts","../../src/assert.ts","../../src/normalize.ts","../../src/refute.ts"],"sourcesContent":["export type CustomErrorConstructor<T extends CustomError = CustomError> = new (message?: string) => T\n\nexport class CustomError extends Error {\n  get name() {\n    return this.constructor.name\n  }\n}\n","import { CustomError } from './custom-error'\n\nexport class ExpectedError extends CustomError {}\n","import { CustomError } from './custom-error'\n\nexport class AssertionError extends CustomError {}\n","import { AssertionError } from './assertion-error'\n\n/**\n * @throws {AssertionError}\n */\nexport function assert(condition: unknown, message?: string): asserts condition {\n  if (!condition) throw new AssertionError(message)\n}\n","export interface SerializableError {\n  name: string\n  message: string\n  stack: string | null\n}\n\nexport function normalize(err: Error): SerializableError {\n  return {\n    name: err.name\n  , message: err.message\n  , stack: err.stack ?? null\n  }\n}\n","import { ExpectedError } from './expected-error'\n\n/**\n * @throws {ExpectedError}\n */\nexport function refute(condition: unknown, message?: string): void {\n  if (condition) throw new ExpectedError(message)\n}\n"],"names":["CustomError","Error","name","this","constructor","ExpectedError","AssertionError","condition","message","err","stack"],"mappings":"oPAEaA,UAAoBC,MAC/BC,WACE,OAAOC,KAAKC,YAAYF,YCFfG,UAAsBL,SCAtBM,UAAuBN,0ECGbO,EAAoBC,GACzC,IAAKD,EAAW,MAAM,IAAID,EAAeE,yBCAjBC,SACxB,MAAO,CACLP,KAAMO,EAAIP,KACVM,QAASC,EAAID,QACbE,gBAAOD,EAAIC,qBAAS,yBCLDH,EAAoBC,GACzC,GAAID,EAAW,MAAM,IAAIF,EAAcG"}