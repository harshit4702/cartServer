class CustomError extends Error {
    get name() {
        return this.constructor.name;
    }
}

class ExpectedError extends CustomError {
}

class AssertionError extends CustomError {
}

function normalize(err) {
    var _a;
    return {
        name: err.name,
        message: err.message,
        stack: (_a = err.stack) !== null && _a !== void 0 ? _a : null
    };
}

/**
 * @throws {ExpectedError}
 */
function refute(condition, message) {
    if (condition)
        throw new ExpectedError(message);
}

/**
 * @throws {AssertionError}
 */
function assert(condition, message) {
    if (!condition)
        throw new AssertionError(message);
}

export { AssertionError, CustomError, ExpectedError, assert, normalize, refute };
//# sourceMappingURL=index.mjs.map
