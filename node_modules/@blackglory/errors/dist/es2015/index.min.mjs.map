{"version":3,"file":"index.min.mjs","sources":["../../src/custom-error.ts","../../src/expected-error.ts","../../src/assertion-error.ts","../../src/normalize.ts","../../src/refute.ts","../../src/assert.ts"],"sourcesContent":["export type CustomErrorConstructor<T extends CustomError = CustomError> = new (message?: string) => T\n\nexport class CustomError extends Error {\n  get name() {\n    return this.constructor.name\n  }\n}\n","import { CustomError } from './custom-error'\n\nexport class ExpectedError extends CustomError {}\n","import { CustomError } from './custom-error'\n\nexport class AssertionError extends CustomError {}\n","export interface SerializableError {\n  name: string\n  message: string\n  stack: string | null\n}\n\nexport function normalize(err: Error): SerializableError {\n  return {\n    name: err.name\n  , message: err.message\n  , stack: err.stack ?? null\n  }\n}\n","import { ExpectedError } from './expected-error'\n\n/**\n * @throws {ExpectedError}\n */\nexport function refute(condition: unknown, message?: string): void {\n  if (condition) throw new ExpectedError(message)\n}\n","import { AssertionError } from './assertion-error'\n\n/**\n * @throws {AssertionError}\n */\nexport function assert(condition: unknown, message?: string): asserts condition {\n  if (!condition) throw new AssertionError(message)\n}\n"],"names":["CustomError","Error","name","this","constructor","ExpectedError","AssertionError","normalize","err","message","stack","refute","condition","assert"],"mappings":"MAEaA,UAAoBC,MAC/BC,WACE,OAAOC,KAAKC,YAAYF,YCFfG,UAAsBL,SCAtBM,UAAuBN,YCIpBO,EAAUC,SACxB,MAAO,CACLN,KAAMM,EAAIN,KACVO,QAASD,EAAIC,QACbC,gBAAOF,EAAIE,qBAAS,eCLRC,EAAOC,EAAoBH,GACzC,GAAIG,EAAW,MAAM,IAAIP,EAAcI,YCDzBI,EAAOD,EAAoBH,GACzC,IAAKG,EAAW,MAAM,IAAIN,EAAeG"}